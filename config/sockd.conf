logoutput: stderr

internal: 151.236.217.13 port = 1488
internal: 2a01:7e00::f03c:91ff:fe70:af41 port = 1488

#use any ipv4 and ipv6 addresses found on eth1 for the external side
external.protocol: ipv4 ipv6
external: eth0

clientmethod: none
socksmethod: none


#user.privileged: root
user.notprivileged: nobody
#user.libwrap: libwrap

timeout.connect: 60
timeout.io: 3600

# accept connections from any IPv4 and IPv6  clients 
client pass {
        from: 0/0 to: 0/0
}

# Block connections to private networks

socks block {
	from: 0.0.0.0/0 to: 127.0.0.0/8
	log: connect error
}

socks block {
	from: 0.0.0.0/0 to: 192.168.0.0/16
	log: connect error
}

socks block {
        from: 0.0.0.0/0 to: 10.0.0.0/8
        log: connect error
}

socks block {
        from: 0.0.0.0/0 to: 172.16.0.0/12
        log: connect error
}


socks block {
        from: ::/0 to: fd00::/8
        log: connect error
}

# ipv4 Telegram networks 

socks pass {
    from: 0.0.0.0/0 to: 91.108.0.0/16
    command: bind connect udpassociate
    log: error
}

socks pass {
    from: 0.0.0.0/0 to: 109.239.140.0/24
    command: bind connect udpassociate
    log: error
}

socks pass {
    from: 0.0.0.0/0 to: 149.154.0.0/16
    command: bind connect udpassociate
    log: error
}

# ipv6 Telegram networks

socks pass {
    from: ::/0 to: 2001:b28:f23f::/48
    command: bind connect udpassociate
    log: error
}

socks pass {
    from: ::/0 to: 2001:b28:f23d::/48
    command: bind connect udpassociate
    log: error
}


socks pass {
    from: ::/0 to: 2001:67c:4e8::/48
    command: bind connect udpassociate
    log: error
}

# Block other ipv4 and ipv6 connections

socks block {
	from: 0/0 to: 0/0
	log: connect error
}

